import org.json.JSONObject

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath 'com.github.arkni:json-to-csv:-SNAPSHOT'
    }
}

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'androidx.benchmark'
}

android {
    compileSdk 34

    defaultConfig {
        minSdk 24
        targetSdk 33

        testInstrumentationRunner 'androidx.benchmark.junit4.AndroidBenchmarkRunner'

        // Enable measuring on an emulator, or devices with low battery
        testInstrumentationRunnerArguments["androidx.benchmark.suppressErrors"] = "EMULATOR,LOW-BATTERY"
    }

    testBuildType = "debug"

    buildTypes {
        debug {
            // Since debuggable can't be modified by gradle for library modules,
            // it must be done in a manifest - see src/androidTest/AndroidManifest.xml\
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'benchmark-proguard-rules.pro'
        }

        release {
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

//    experimentalProperties["android.experimental.self-instrumenting"] = true
}

//android {
//    namespace 'com.app.ichsanulalifwan.barani.benchmark'
//    compileSdk 33
//
//    compileOptions {
//        sourceCompatibility = JavaVersion.VERSION_1_8
//        targetCompatibility = JavaVersion.VERSION_1_8
//    }
//
//    kotlinOptions {
//        jvmTarget = "1.8"
//    }
//
//    defaultConfig {
//        minSdk 24
//        targetSdk 33
//        versionCode 1
//        versionName "1.0"
//
//        testInstrumentationRunner 'androidx.benchmark.junit4.AndroidBenchmarkRunner'
//    }
//
//    testBuildType = "debug"
//
//
//
//    buildTypes {
//        // This benchmark buildType is used for benchmarking, and should function like your
//        // release build (for example, with minification on). It's signed with a debug key
//        // for easy local/CI testing.
////        benchmark {
////            debuggable = false
////            signingConfig = debug.signingConfig
////            matchingFallbacks = ["release"]
////        }
//
//        debug {
//            // Since debuggable can't be modified by gradle for library modules,
//            // it must be done in a manifest - see src/androidTest/AndroidManifest.xml
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'benchmark-proguard-rules.pro'
//        }
//
//        release {
//        }
//    }
//
//    experimentalProperties["android.experimental.self-instrumenting"] = true
//}

dependencies {
    implementation project(":core")

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation "androidx.benchmark:benchmark-junit4:1.2.3"
}

task benchmarkJsonToCsv {

    doFirst {

        // Getting benchmark files available
        // Matching by the format described in the docs
        def expectedBenchmarkPath = "$buildDir/outputs"
        def files = fileTree(expectedBenchmarkPath)
                .matching { include "**/*benchmarkData.json" }
                .getFiles()

        // If no benchmark file is found stop the task
        if (files.isEmpty()) {
            throw new GradleException("No benchmark files found inside $expectedBenchmarkPath")
        }

        // Get the first benchmark file and getting the 'benchmarks' array inside the JSON file
        def benchmarkFile = files.first()
        def strBytes = new String(benchmarkFile.bytes)
        def arrayObject = new JSONObject(strBytes).getJSONArray("benchmarks")

        // If the 'benchmarks' array is empty, stop the task
        if (arrayObject == null || arrayObject.length() < 1) {
            throw new GradleException("Could not find any benchmark data inside the JSON file.")
        }

        def flatArray = JSONFlattener.parse(arrayObject)

        // Writing flatted benchmark data to csv
        def csvFilePath = "$projectDir/results/benchmark.csv"
        CSVWriter.writeToFile(CSVWriter.getCSV(flatArray), csvFilePath)

        println(CSVWriter.getCSV(flatArray))
        println("CSV generated at $csvFilePath")
    }
}

task benchmarkCsvReport {
    dependsOn ':benchmark:connectedCheck', ':benchmark:benchmarkJsonToCsv'
    benchmarkJsonToCsv.mustRunAfter connectedCheck
}