import org.json.JSONObject

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath 'com.github.arkni:json-to-csv:-SNAPSHOT'
    }
}

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'androidx.benchmark'
}

android {
    namespace 'com.app.ichsanulalifwan.barani.benchmark'
    compileSdk 33

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    defaultConfig {
        minSdk 24
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        // This benchmark buildType is used for benchmarking, and should function like your
        // release build (for example, with minification on). It's signed with a debug key
        // for easy local/CI testing.
        benchmark {
            debuggable = false
            signingConfig = debug.signingConfig
            matchingFallbacks = ["release"]
        }
    }

    experimentalProperties["android.experimental.self-instrumenting"] = true
}

dependencies {
    implementation 'androidx.test.ext:junit:1.1.5'
    implementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'androidx.benchmark:benchmark-junit4:1.1.1'

    implementation project(path: ':core')
    androidTestImplementation project(':kotlin-flow')
    androidTestImplementation project(':rxjava')
    androidTestImplementation project(':reactor')
}

androidComponents {
    beforeVariants(selector().all()) {
        enabled = buildType == "benchmark"
    }
}

task benchmarkJsonToCsv {

    doFirst {

        // Getting benchmark files available
        // Matching by the format described in the docs
        def expectedBenchmarkPath = "$buildDir/outputs"
        def files = fileTree(expectedBenchmarkPath)
                .matching { include "**/*benchmarkData.json" }
                .getFiles()

        // If no benchmark file is found stop the task
        if (files.isEmpty()) {
            throw new GradleException("No benchmark files found inside $expectedBenchmarkPath")
        }

        // Get the first benchmark file and getting the 'benchmarks' array inside the JSON file
        def benchmarkFile = files.first()
        def strBytes = new String(benchmarkFile.bytes)
        def arrayObject = new JSONObject(strBytes).getJSONArray("benchmarks")

        // If the 'benchmarks' array is empty, stop the task
        if (arrayObject == null || arrayObject.length() < 1) {
            throw new GradleException("Could not find any benchmark data inside the JSON file.")
        }

        def flatArray = JSONFlattener.parse(arrayObject)

        // Writing flatted benchmark data to csv
        def csvFilePath = "$projectDir/results/benchmark.csv"
        CSVWriter.writeToFile(CSVWriter.getCSV(flatArray), csvFilePath)

        println(CSVWriter.getCSV(flatArray))
        println("CSV generated at $csvFilePath")
    }
}

task benchmarkCsvReport {
    dependsOn ':benchmark:connectedCheck', ':benchmark:benchmarkJsonToCsv'
    benchmarkJsonToCsv.mustRunAfter connectedCheck
}